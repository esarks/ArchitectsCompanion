<%

  parseXmlPath(<![$jac:path:home]\\temp\\printStdQuestionnaire.xml!>);

  DbConnection lDbConnection = symbolTable.getDbConnection();
  lDbConnection.connect("oracle.jdbc.driver.OracleDriver", "jdbc:oracle:thin:@asdczd:1521:esarks", "system", "manager");

  <!questionnaire!>!resetIterator();

  try {        
    PreparedStatement lPreparedStatement = lDbConnection.getConnection().prepareStatement(
      "SELECT " +
      "a.uniqueId     uniqueId, " +
      "a.version      version, " +
      "a.description  description, " +
      "b.uniqueId     questionId, " +
      "b.version      questionVersion, " +
      "b.versionOut   questionVersionOut, " +
      "b.sequence     questionSequence, " +
      "b.text         questionText, " +
      "b.responseType responseType, " +
      "c.uniqueId     responseId, " +
      "c.version      responseVersion, " +
      "c.versionOut   responseVersionOut, " +
      "c.sequence     responseSequence, " +
      "c.text         responseText " +
      "FROM stdQuestionnaire a, stdQuestion b, stdResponse c " +
      "WHERE (a.uniqueId = ? AND a.version = ?) AND " +
      "      (a.uniqueId = b.stdQuestionnaireUid AND " +
      "      (a.version >= b.version) AND " +
      "      (b.versionOut is Null OR b.versionOut > a.version)) AND " +
      "      ((a.uniqueId = c.stdQuestionnaireUid) AND " +
      "      (b.uniqueId = c.stdQuestionUid) AND " +
      "      (a.version >= c.version) AND " +
      "      (c.versionOut is Null OR c.versionOut > a.version)) " +
      "ORDER BY b.sequence, c.sequence");

    lPreparedStatement.setString(1, <![questionnaire:code]!>);
    lPreparedStatement.setString(2, <![questionnaire:version]!>);
    <!questionnaire!>!remove();

    ResultSet lResultSet = lPreparedStatement.executeQuery();

    String lLastStdQuestionUid = "";

    boolean lInit = false;

    while (lResultSet.next()) {
      if (lInit == false) {
        lInit = true;
        <!questionnaire!>!set("");
        <!questionnaire:code!>!set(lResultSet.getString("uniqueId"));
        <!questionnaire:version!>!set(lResultSet.getString("version"));
        <!questionnaire:description!>!set(lResultSet.getString("description"));
      }
      if (lLastStdQuestionUid.compareTo(lResultSet.getString("questionId")) != 0) {
        lLastStdQuestionUid = lResultSet.getString("questionId");
        <!questionnaire:question!>!set("");
        <!questionnaire:question:code!>!set(lResultSet.getString("questionId"));
        <!questionnaire:question:version!>!set(lResultSet.getString("questionVersion"));
        <!questionnaire:question:sequence!>!set(lResultSet.getString("questionSequence"));
        <!questionnaire:question:text!>!set(lResultSet.getString("questionText"));
        <!questionnaire:question:responseType!>!set(lResultSet.getString("responseType"));
      }
      <!questionnaire:question:response!>!set("");
      <!questionnaire:question:response:code!>!set(lResultSet.getString("responseId"));
      <!questionnaire:question:response:version!>!set(lResultSet.getString("responseVersion"));
      <!questionnaire:question:response:sequence!>!set(lResultSet.getString("responseSequence"));
      <!questionnaire:question:response:text!>!set(lResultSet.getString("responseText"));
    }

    lResultSet.close();
    lPreparedStatement.close();

  }
  catch (Exception e) {
    System.out.println(e);
  }

  <!script!>!loadScript("questionnaire.exportRtf");
  <!script!>!execMethod("execute");

%>

