<%

  parseXmlPath(<![$jac:path:home]\\temp\\maintainStdQuestionnaire.xml!>);
  parseXmlPath(<![$jac:path:home]\\temp\\!> + <![questionnaireFile]!> + ".xml");

  DbConnection lDbConnection = symbolTable.getDbConnection();
  lDbConnection.connect("oracle.jdbc.driver.OracleDriver", "jdbc:oracle:thin:@asdczd:1521:esarks", "system", "manager");

  <!questionnaire!>!resetIterator();
    
  try
  {
      CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
          "BEGIN " +
          "INSERT INTO stdQuestionnaire (uniqueId,version,description) " +
          "VALUES (?,?,?); " +
          "END;" );
      lCallableStatement.setString(1, <![questionnaire:code]!>);
      lCallableStatement.setString(2, <![questionnaire:version]!>);
      lCallableStatement.setString(3, <![questionnaire:description]!>);
      lCallableStatement.execute();
      lCallableStatement.close();
  }
  catch (Exception e)
  {
    System.out.println(e);
  }

  <!questionnaire:question!>!resetIterator();
  while (<!questionnaire:question!>!next()) {

    if (<![questionnaire:version]!>.compareTo(<![questionnaire:question:version]!>) == 0) {

      try {
        CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
            "BEGIN " +
            "UPDATE stdQuestion set versionOut = ? WHERE stdQuestionnaireUid = ? AND uniqueId = ? AND versionOut is Null; " +
            "END;" );
        lCallableStatement.setString(1, <![questionnaire:version]!>);
        lCallableStatement.setString(2, <![questionnaire:code]!>);
        lCallableStatement.setString(3, <![questionnaire:question:code]!>);
        lCallableStatement.execute();
        lCallableStatement.close();
      }
      catch (Exception e) {
          System.out.println(e);
      }

      try {
        CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
            "BEGIN " +
            "INSERT INTO stdQuestion (stdQuestionnaireUid,uniqueId,version,versionOut,sequence,text,responseType) " +
            "VALUES (?,?,?,?,?,?,?); " +
            "END;" );
        lCallableStatement.setString(1, <![questionnaire:code]!>);
        lCallableStatement.setString(2, <![questionnaire:question:code]!>);
        lCallableStatement.setString(3, <![questionnaire:question:version]!>);
        lCallableStatement.setString(4, <![questionnaire:question:versionOut]!>);
        lCallableStatement.setString(5, <![questionnaire:question:sequence]!>);
        lCallableStatement.setString(6, <![questionnaire:question:text]!>);
        lCallableStatement.setString(7, <![questionnaire:question:responseType]!>);
        lCallableStatement.execute();
        lCallableStatement.close();
      }
      catch (Exception e) {
          System.out.println(e);
      }
    } else {
      if (<![questionnaire:version]!>.compareTo(<![questionnaire:question:versionOut]!>) == 0) {
        try {
          CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdQuestion set versionOut = ? WHERE stdQuestionnaireUid = ? AND uniqueId = ? AND versionOut is Null; " +
              "END;" );
          lCallableStatement.setString(1, <![questionnaire:version]!>);
          lCallableStatement.setString(2, <![questionnaire:code]!>);
          lCallableStatement.setString(3, <![questionnaire:question:code]!>);
          lCallableStatement.execute();
          lCallableStatement.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }
      }
    }

    <!questionnaire:question:response!>!resetIterator();
    while (<!questionnaire:question:response!>!next()) {

      if (<![questionnaire:version]!>.compareTo(<![questionnaire:question:response:version]!>) == 0) {

        try {
          CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdResponse set versionOut = ? WHERE stdQuestionnaireUid = ? AND stdQuestionUid = ? AND uniqueId = ? and versionOut is Null; " +
              "END;" );
          lCallableStatement.setString(1, <![questionnaire:version]!>);
          lCallableStatement.setString(2, <![questionnaire:code]!>);
          lCallableStatement.setString(3, <![questionnaire:question:code]!>);
          lCallableStatement.setString(4, <![questionnaire:question:response:code]!>);
          lCallableStatement.execute();
          lCallableStatement.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }

        try {
          CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "INSERT INTO stdResponse (stdQuestionnaireUid,stdQuestionUid,uniqueId,version,versionOut,sequence,text) " +
              "VALUES (?,?,?,?,?,?,?); " +
              "END;" );
          lCallableStatement.setString(1, <![questionnaire:code]!>);
          lCallableStatement.setString(2, <![questionnaire:question:code]!>);
          lCallableStatement.setString(3, <![questionnaire:question:response:code]!>);
          lCallableStatement.setString(4, <![questionnaire:question:response:version]!>);
          lCallableStatement.setString(5, <![questionnaire:question:response:versionOut]!>);
          lCallableStatement.setString(6, <![questionnaire:question:response:sequence]!>);
          lCallableStatement.setString(7, <![questionnaire:question:response:text]!>);
          lCallableStatement.execute();
          lCallableStatement.close();
        }
        catch (Exception e) {
          System.out.println(e);
        }
      } else {
        if (<![questionnaire:version]!>.compareTo(<![questionnaire:question:response:versionOut]!>) == 0) {
          try {
            CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
                "BEGIN " +
                "UPDATE stdResponse set versionOut = ? WHERE stdQuestionnaireUid = ? AND stdQuestionUid = ? AND uniqueId = ? and versionOut is Null; " +
                "END;" );
            lCallableStatement.setString(1, <![questionnaire:version]!>);
            lCallableStatement.setString(2, <![questionnaire:code]!>);
            lCallableStatement.setString(3, <![questionnaire:question:code]!>);
            lCallableStatement.setString(4, <![questionnaire:question:response:code]!>);
            lCallableStatement.execute();
            lCallableStatement.close();
          }
          catch (Exception e) {
              System.out.println(e);
          }
        }
      }
    }
  }

%>
