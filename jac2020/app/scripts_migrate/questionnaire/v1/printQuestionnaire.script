<%

  parseXmlPath(<![$jac:path:home]\\temp\\printQuestionnaire.xml!>);

  DbConnection lDbConnection = symbolTable.getDbConnection();
  lDbConnection.connect("oracle.jdbc.driver.OracleDriver", "jdbc:oracle:thin:@asdczd:1521:esarks", "system", "manager");

  <!questionnaire!>!resetIterator();

  try {        
    PreparedStatement lPreparedStatement = lDbConnection.getConnection().prepareStatement(
      "SELECT " +
      "a.itemId, " +
      "a.version, " +
      "a.stdQuestionnaireUid, " +
      "a.stdQuestionnaireVersion, " +
      "b.questionnaireId, " +
      "b.stdQuestionUid, " +
      "b.stdResponseUid, " +
      "b.version responseVersion, " +
      "b.versionOut responseVersionOut, " +
      "c.description, " +
      "d.sequence questionSequence, " +
      "d.text questionText, " +
      "d.responseType, " +
      "e.sequence responseSequence, " +
      "e.text responseText " +
      "FROM questionnaire a, questionnaireResponse b, stdQuestionnaire c, stdQuestion d, stdResponse e " +
      "WHERE (a.itemId = ? AND a.version = ?) AND " +
      "      (a.itemId = b.questionnaireId AND " +
      "      (a.version >= b.version) AND " +
      "      (b.versionOut is Null OR b.versionOut > a.version)) AND " +
      "      (c.uniqueId = a.stdQuestionnaireUid AND c.version = a.stdQuestionnaireVersion) AND " +
      "      ((d.stdQuestionnaireUid = c.uniqueId AND d.uniqueId = b.stdQuestionUid) AND " +
      "      (d.version <= c.version) AND (d.versionOut is NULL or d.versionOut < c.version)) AND " +
      "      ((e.stdQuestionnaireUid = c.uniqueId AND e.stdQuestionUid = d.uniqueId AND e.uniqueId = b.stdResponseUid) AND " +
      "      (e.version <= c.version) AND (e.versionOut is NULL or e.versionOut < c.version)) " +
      "ORDER BY d.sequence, e.sequence");

    lPreparedStatement.setString(1, <![questionnaire:control]!>);
    lPreparedStatement.setString(2, <![questionnaire:sequence]!>);
    <!questionnaire!>!remove();

    ResultSet lResultSet = lPreparedStatement.executeQuery();

    String lLastStdQuestionUid = "";

    boolean lInit = false;

    while (lResultSet.next()) {
      if (lInit == false) {
        lInit = true;
        <!questionnaire!>!set("");
        <!questionnaire:control!>!set(lResultSet.getString("itemId"));
        <!questionnaire:controlSequence!>!set(lResultSet.getString("version"));
        <!questionnaire:code!>!set(lResultSet.getString("stdQuestionnaireUid"));
        <!questionnaire:version!>!set(lResultSet.getString("stdQuestionnaireVersion"));
        <!questionnaire:description!>!set(lResultSet.getString("description"));
      }
      if (lLastStdQuestionUid.compareTo(lResultSet.getString("stdQuestionUid")) != 0) {
        lLastStdQuestionUid = lResultSet.getString("stdQuestionUid");
        <!questionnaire:question!>!set("");
        <!questionnaire:question:code!>!set(lResultSet.getString("stdQuestionUid"));
        <!questionnaire:question:sequence!>!set(lResultSet.getString("questionSequence"));
        <!questionnaire:question:text!>!set(lResultSet.getString("questionText"));
        <!questionnaire:question:responseType!>!set(lResultSet.getString("responseType"));
      }
      <!questionnaire:question:response!>!set("");
      <!questionnaire:question:response:code!>!set(lResultSet.getString("stdResponseUid"));
      <!questionnaire:question:response:sequence!>!set(lResultSet.getString("responseSequence"));
      <!questionnaire:question:response:text!>!set(lResultSet.getString("responseText"));
    }

    lResultSet.close();
    lPreparedStatement.close();

  }
  catch (Exception e) {
    System.out.println(e);
  }

  <!script!>!loadScript("questionnaire.exportQuestionnaireRtf");
  <!script!>!execMethod("execute");

%>

