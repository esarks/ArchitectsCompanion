<%

  parseXmlPath(<![$jac:path:home]\\temp\\maintainStdQuestionnaire.xml!>);

  DbConnection lDbConnection = symbolTable.getDbConnection();
  lDbConnection.connect("oracle.jdbc.driver.OracleDriver", "jdbc:oracle:thin:@asdczd:1521:esarks", "system", "manager");

  <!maintain:questionnaireFile!>!resetIterator();
  while(<!maintain:questionnaireFile!>!next()) {

    <!questionnaire!>!remove();
    parseXmlPath(<![$jac:path:home]\\temp\\!> + <![maintain:questionnaireFile]!> + ".xml");

    int lArgNbr;
    
    try
    {
      CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
          "BEGIN " +
          "INSERT INTO stdQstnrVersion (qstnrCode, qstnrSequence, description) " +
          "VALUES (?,?,?); " +
          "END;" );

      lArgNbr = 1;
      lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
      lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
      lCallableStatement.setString(lArgNbr++, <![questionnaire:title]!>);
      lCallableStatement.execute();
      lCallableStatement.close();
    }
    catch (Exception e)
    {
      System.out.println(e);
    }

    <!questionnaire:question!>!resetIterator();
    while (<!questionnaire:question!>!next()) {

      if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:question:sequence]!>) == 0) {

        try {
          CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdQuest set questSequenceOut ? WHERE qstnrCode = ? AND questCode = ? AND questSequenceOut is Null; " +
              "END;" );
          lArgNbr = 1;
          lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:question:code]!>);
          lCallableStatement.execute();
          lCallableStatement.close();
        }
        catch (Exception e) {
          System.out.println(e);
        }

        try {
          CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "INSERT INTO stdQuest(qstnrCode,questCode,questSequence,questSequenceOut,questText) " +
              "VALUES (?,?,?,?,?); " +
              "END;" );
          lArgNbr = 1;
          lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:question:code]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:question:sequence]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:question:sequenceOut]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:question:text]!>);
          lCallableStatement.execute();
          lCallableStatement.close();
        }
        catch (Exception e) {
          System.out.println(e);
        }
      } else {
        if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:question:sequenceOut]!>) == 0) {
          try {
            CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdQuest set questSequenceOut = ? WHERE qstnrCode = ? AND questCode = ? AND questSequenceOut is Null; " +
              "END;" );
            lArgNbr = 1;
            lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:code]!>);
            lCallableStatement.execute();
            lCallableStatement.close();
          }
          catch (Exception e) {
            System.out.println(e);
          }
        }
      }

      <!questionnaire:question:response!>!resetIterator();
      while (<!questionnaire:question:response!>!next()) {

        if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:question:response:sequence]!>) == 0) {

          try {
            CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdResponse set responseSequenceOut = ? WHERE qstnrCode = ? AND questCode = ? AND responseCode = ? AND responseSequenceOut is Null; " +
              "END;" );
            lArgNbr = 1;
            lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:response:code]!>);
            lCallableStatement.execute();
            lCallableStatement.close();
          }
          catch (Exception e) {
            System.out.println(e);
          }

          try {
            CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "INSERT INTO stdResponse (qstnrCode,questCode,responseCode,responseSequence,responseSequenceOut,responseOrder,responseText) " +
              "VALUES (?,?,?,?,?,?,?); " +
              "END;" );
            lArgNbr = 1;
            lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:response:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:response:sequence]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:response:sequenceOut]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:response:order]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:question:response:text]!>);
            lCallableStatement.execute();
            lCallableStatement.close();
          }
          catch (Exception e) {
            System.out.println(e);
          }
        } else {
          if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:question:response:sequenceOut]!>) == 0) {
            try {
              CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
                  "BEGIN " +
                  "UPDATE stdResponse set responseSequenceOut = ? WHERE qstnrCode = ? AND questCode = ? AND responseCode = ? and responseSequenceOut is Null; " +
                  "END;" );
              lArgNbr = 1;
              lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
              lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
              lCallableStatement.setString(lArgNbr++, <![questionnaire:question:code]!>);
              lCallableStatement.setString(lArgNbr++, <![questionnaire:question:response:code]!>);
              lCallableStatement.execute();
              lCallableStatement.close();
            }
            catch (Exception e) {
                System.out.println(e);
            }
          }
        }
      }
    }

    <!questionnaire:group!>!resetIterator();
    while (<!questionnaire:group!>!next()) {

      if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:group:sequence]!>) == 0) {

        try {
          CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdGroup set groupSequenceOut ? WHERE qstnrCode = ? AND groupCode = ? AND groupSequenceOut is Null; " +
              "END;" );
          lArgNbr = 1;
          lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:group:code]!>);
          lCallableStatement.execute();
          lCallableStatement.close();
        }
        catch (Exception e) {
          System.out.println(e);
        }

        try {
          CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "INSERT INTO stdGroup(qstnrCode,groupCode,groupSequence,groupSequenceOut,groupParentCode,groupOrder,groupText) " +
              "VALUES (?,?,?,?,?,?,?); " +
              "END;" );
          lArgNbr = 1;
          lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:group:code]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:group:sequence]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:group:sequenceOut]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:group:parent]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:group:order]!>);
          lCallableStatement.setString(lArgNbr++, <![questionnaire:question:text]!>);
          lCallableStatement.execute();
          lCallableStatement.close();
        }
        catch (Exception e) {
          System.out.println(e);
        }
      } else {
        if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:group:sequenceOut]!>) == 0) {
          try {
            CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdGroup set groupSequenceOut = ? WHERE qstnrCode = ? AND groupCode = ? AND groupSequenceOut is Null; " +
              "END;" );
            lArgNbr = 1;
            lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:code]!>);
            lCallableStatement.execute();
            lCallableStatement.close();
          }
          catch (Exception e) {
            System.out.println(e);
          }
        }
      }

      <!questionnaire:group:question!>!resetIterator();
      while (<!questionnaire:group:question!>!next()) {

        if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:group:question:sequence]!>) == 0) {

          try {
            CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "UPDATE stdGroupQuest set groupQuestSequenceOut = ? WHERE qstnrCode = ? AND groupCode = ? AND questCode = ? AND questSequence = ? AND groupQuestSequenceOut is Null; " +
              "END;" );
            lArgNbr = 1;
            lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:question:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:question:sequence]!>);
            lCallableStatement.execute();
            lCallableStatement.close();
          }
          catch (Exception e) {
            System.out.println(e);
          }

          try {
            CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
              "BEGIN " +
              "INSERT INTO stdGroupQuest (qstnrCode,groupCode,questCode,questSequence,groupQuestSequence,groupQuestSequenceOut,questOrder) " +
              "VALUES (?,?,?,?,?,?,?); " +
              "END;" );
            lArgNbr = 1;
            lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:question:code]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:question:sequence]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:sequence]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:sequenceOut]!>);
            lCallableStatement.setString(lArgNbr++, <![questionnaire:group:question:order]!>);
            lCallableStatement.execute();
            lCallableStatement.close();
          }
          catch (Exception e) {
            System.out.println(e);
          }
        } else {
          if (<![questionnaire:sequence]!>.compareTo(<![questionnaire:question:response:sequenceOut]!>) == 0) {
            try {
              CallableStatement lCallableStatement = lDbConnection.getConnection().prepareCall(
                  "BEGIN " +
                  "UPDATE stdGroupQuest set groupQuestSequenceOut = ? WHERE qstnrCode = ? AND groupCode = ? questCode = ? AND questSequence = ? AND groupQuestSequenceOut is Null; " +
                  "END;" );
              lArgNbr = 1;
              lCallableStatement.setString(lArgNbr++, <![questionnaire:sequence]!>);
              lCallableStatement.setString(lArgNbr++, <![questionnaire:code]!>);
              lCallableStatement.setString(lArgNbr++, <![questionnaire:group:code]!>);
              lCallableStatement.setString(lArgNbr++, <![questionnaire:group:question:code]!>);
              lCallableStatement.setString(lArgNbr++, <![questionnaire:group:question:sequence]!>);
              lCallableStatement.execute();
              lCallableStatement.close();
            }
            catch (Exception e) {
                System.out.println(e);
            }
          }
        }
      }
    }
  }

%>
