import java.io.File
import java.io.FileNotFoundException
import java.io.FileOutputStream
import java.io.IOException
import java.io.OutputStream
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import ca.uhn.hl7v2.DefaultHapiContext
import ca.uhn.hl7v2.HL7Exception
import ca.uhn.hl7v2.HapiContext
import ca.uhn.hl7v2.parser.Parser
import ca.uhn.hl7v2.model.Message
import ca.uhn.hl7v2.validation.builder.support.DefaultValidationBuilder
import ca.uhn.hl7v2.validation.builder.support.NoValidationBuilder
import ca.uhn.hl7v2.model.DataTypeException;
import ca.uhn.hl7v2.model.v23.datatype.PL
import ca.uhn.hl7v2.model.v23.datatype.XAD
import ca.uhn.hl7v2.model.v23.datatype.XCN
import ca.uhn.hl7v2.model.v23.datatype.XPN
import ca.uhn.hl7v2.model.v23.message.SIU_S12
import ca.uhn.hl7v2.model.v23.message.SIU_S13
import ca.uhn.hl7v2.model.v23.message.SIU_S14
import ca.uhn.hl7v2.model.v23.message.SIU_S15
import ca.uhn.hl7v2.model.v23.message.SIU_S16
import ca.uhn.hl7v2.model.v23.message.SIU_S17
import ca.uhn.hl7v2.model.v23.message.SIU_S18
import ca.uhn.hl7v2.model.v23.message.SIU_S19
import ca.uhn.hl7v2.model.v23.message.SIU_S20
import ca.uhn.hl7v2.model.v23.message.SIU_S21
import ca.uhn.hl7v2.model.v23.message.SIU_S22
import ca.uhn.hl7v2.model.v23.message.SIU_S23
import ca.uhn.hl7v2.model.v23.message.SIU_S24
import ca.uhn.hl7v2.model.v23.message.SIU_S26
import ca.uhn.hl7v2.model.v23.segment.MSH
import ca.uhn.hl7v2.model.v23.segment.SCH
import ca.uhn.hl7v2.model.v23.segment.NTE
import ca.uhn.hl7v2.model.v23.segment.PID
import ca.uhn.hl7v2.model.v23.segment.PV1
import ca.uhn.hl7v2.model.v23.segment.PV2
import ca.uhn.hl7v2.model.v23.segment.OBX
import ca.uhn.hl7v2.model.v23.segment.DG1
import ca.uhn.hl7v2.model.v23.segment.RGS
import ca.uhn.hl7v2.model.v23.segment.AIS
      
public HapiContext iHapiContext = new DefaultHapiContext();
public int iSequence = 0;

public void execute() {

//    iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\Disability_Benefit_Questionnaire_Claims-2.0rc2.iepd\\XMLsamples\\2.0\\GenericDbqWithEnhancements.xml");
//    iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\Disability_Benefit_Questionnaire_Claims-2.0rc2.iepd\\XMLsamples\\2.0\\GeneralMedicalSeparationHealthAssessmentSample.xml");
    iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\HL7\\SHA_DBQ_v19_3.xml");

//  iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\ExamManagement-3.0rc5.iepd\\XMLschemas\\exchange\\ExamManagement-3.0.xsd");
//  iSymbolTable.parseXml("C:\\ArchitectsCompanion\\jac2017\\app\\ehrm\\HapiTest.xml");
//  iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\ExamManagement-3.0rc5.iepd\\XMLsamples\\3.0\\basic_exam_schedule_request\\1_ExamSchedulingRequestCreatedEvent.xml");
//  iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\ExamManageme//nt-3.0rc5.iepd\\XMLsamples\\3.0\\basic_exam_schedule_request\\1_ExamSchedulingRequestCreatedEvent_HL7Map.xml");
//  iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\ExamManageme//nt-3.0rc5.iepd\\XMLsamples\\3.0\\basic_exam_schedule_request\\1_ExamSchedulingRequestCreatedEvent.xml");

//  PropertyCollection lPropertyCollection = iSymbolTable.getPropertyCollection();

//  iterateSymbolTable(iSymbolTable.getPropertyCollection(), "em~ExamManagementEventNotification", "");

%>
A1:A2=<![A1:A2]!>
<%

//<A1 A2="2" A3="3">1
//  <A4 A5="5"/>4
//  <A6>6</A6>
//</A1>

  PropertyCollection lPropertyCollection = iSymbolTable.getPropertyCollection(); 
  PropertyValues lPropertyValues = lPropertyCollection.getPropertyValues("cld~Claim", false);
%>
lPropertyValues = <!%lPropertyValues.getName()!>
<%

  iOutputManager.openOutputFile("C:\\ArchitectsCompanion\\jac2017\\app\\ehrm\\HapiOut.xml", false);
  iteratePropertyValues(lPropertyValues, lPropertyValues.getName(), "");
  iOutputManager.closeOutputFile();

//  iteratePropertyValue(lPropertyValue, "ExamManagementEventNotification", "");
//  iterateSymbolTable(iSymbolTable);

}

public void iterateSymbolTableB(SymbolTable aSymbolTable) {

// Get the root PropertyCollection from SymbolTable

  PropertyCollection lPropertyCollection = aSymbolTable.getPropertyCollection(); 

// Get the LinkedHashMap from the PropertyCollection object; then Set; then Iterator
// This will allow iteration in FIFO order
  LinkedHashMap lMap = (LinkedHashMap) lPropertyCollection.getProperties();
  Set lSet = lMap.entrySet();
  Iterator lIterator = lSet.iterator();


  while (lIterator.hasNext()) {
    PropertyValues lPropertyValues = (PropertyValues) ((Map.Entry)lIterator.next()).getValue();

    lPropertyValues.resetIterator(0);
    int lSize = lPropertyValues.size();

    for (int lIdx = 1; lIdx <= lSize; lIdx++) {
      PropertyValue lPropertyValue = lPropertyValues.get(lIdx);
      Object lValueObject = lPropertyValue.getValueObject();
      PropertyCollection lPropertyCollection2 = lPropertyValue.getPropertyCollection();
      if (lPropertyCollection2 != null) {
        iteratePropertyCollection(lPropertyCollection2, lPropertyValues.getName(), " ");
      }
    }
  }  
}

public void iterateSymbolTable(SymbolTable aSymbolTable) {

// Symbol table has a PropertyCollection

  PropertyCollection lPropertyCollection = aSymbolTable.getPropertyCollection(); 
  iteratePropertyCollection(lPropertyCollection, lPropertyCollection.getName(), " ");
  
}

public void iteratePropertyCollection(PropertyCollection aPropertyCollection, String aName, String aIndent) {

// PropertyCollection has Name and LinkedHashList of Named PropertyValues

  LinkedHashMap lMap = (LinkedHashMap) aPropertyCollection.getProperties();
  Set lSet = lMap.entrySet();
  Iterator lIterator = lSet.iterator();

  while (lIterator.hasNext()) {
    PropertyValues lPropertyValues = (PropertyValues) ((Map.Entry)lIterator.next()).getValue();
    iteratePropertyValues(lPropertyValues, lPropertyValues.getName(), aIndent + " ");
  }

}

public void iteratePropertyValues(PropertyValues aPropertyValues, String aName, String aIndent) {

%>

<%

  iSequence++;
  int lSequence = iSequence;
      
  int lChar = aName.indexOf('~');
  if (lChar > -1) {
    aName = aName.substring(lChar+1);
  }
  
  aPropertyValues.resetIterator(0);
  int lSize = aPropertyValues.size();

%>
<!%aIndent!><<!%aName!>><%

  for (int lIdx = 1; lIdx <= lSize; lIdx++) {
    PropertyValue lPropertyValue = aPropertyValues.get(lIdx);
    iteratePropertyValue(lPropertyValue, aName, aIndent + " ");
  }

//<HL7 Message="" Segment=""/></<!%aName!>>

  if (lSequence == iSequence) {
%></<!%aName!>><%
  } else {
%>

<!%aIndent!></<!%aName!>><%
  }
  
}

public void iteratePropertyValue(PropertyValue aPropertyValue, String aName, String aIndent) {

  Object lValueObject = aPropertyValue.getValueObject();

//<!%lValueObject!>
%><!%aPropertyValue.getValueString()!><%

  PropertyCollection lPropertyCollection = aPropertyValue.getPropertyCollection();
  if (lPropertyCollection != null) {
    iteratePropertyCollection(lPropertyCollection, aName, aIndent + " ");
  }
  
}



public void executexx() {

%>
schemaLocation                ** <![em~ExamManagementEventNotification:xsi~schemaLocation]!> **
participatingSystemName       ** <![em~ExamManagementEventNotification:em~OriginatingSystem:participatingSystemName]!> **
-hl7Msg                       ** <![em~ExamManagementEventNotification:em~OriginatingSystem:participatingSystemName:hl7:Message]!> **
-hl7Seg                       ** <![em~ExamManagementEventNotification:em~OriginatingSystem:participatingSystemName:hl7:Segment]!> **


participatingSystemName       ** <![em~ExamManagementEventNotification:em~Destination:participatingSystemName]!> ** VBA Contractor
contractorName                ** <![em~ExamManagementEventNotification:em~Destination:contractorName]!> ** QTC1
                              
eventUuid                     ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:eventUuid]!> **
eventDtg                      ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:eventDtg]!> **
modelVersion                  ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:modelVersion]!> **
previousEventUuid             ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:previousEventUuid]!> **
examSchedulingRequestUuid     ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:examSchedulingRequestUuid]!> **
-hl7Msg                       ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:examSchedulingRequestUuid:hl7:Message]!> **
-hl7Seg                       ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:examSchedulingRequestUuid:hl7:Segment]!> **

participatingSystemName       ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~EventSource:participatingSystemName]!> ** VBMS2
-hl7Msg                       ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~EventSource:participatingSystemName:hl7:Message]!> **
-hl7Seg                       ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~EventSource:participatingSystemName:hl7:Segment]!> **

PostDischargeClaimInformation ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~PostDischargeClaimInformation:claimDate]!> **
-VeteranServiceMemberInfo     ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~PostDischargeClaimInformation:em~VeteranServiceMemberInfo:fullName]!> **
--Address                     ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~PostDischargeClaimInformation:em~VeteranServiceMemberInfo:em~Address:em~Address1]!> **
--Phone                       ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~PostDischargeClaimInformation:em~VeteranServiceMemberInfo:em~Phone:primaryPhone]!> **
--PeriodsOfService            ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~PostDischargeClaimInformation:em~VeteranServiceMemberInfo:em~PeriodsOfService:em~Period:branchOfService]!> **

ExamRelatedContentions        ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~ExamRelatedContentions:em~ExamRelatedContention:examRelatedContentionUuid]!> **
-ContentionName               ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~ExamRelatedContentions:em~ExamRelatedContention:em~ContentionName]!> **
-Classification               ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~ExamRelatedContentions:em~ExamRelatedContention:em~Classification:code]!> **
--name                        ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~ExamRelatedContentions:em~ExamRelatedContention:em~Classification:name]!> **
-DbqRequest                   ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~ExamRelatedContentions:em~ExamRelatedContention:em~DbqRequests:em~DbqRequest:name]!> **
--NarrativeEntry              ** <![em~ExamManagementEventNotification:em~ExamSchedulingRequestCreatedEvent:em~ExamRelatedContentions:em~ExamRelatedContention:em~DbqRequests:em~DbqRequest:em~NarrativeEntry]!> **


<%
}

public SIU_S12 createSIU_S12Message(String aSendingApplication,
                                    String aSendingFacility,
                                    String aReceivingApplication,
                                    String aReceivingFacility
                                   ) {

  SIU_S12 lSIU_S12 = null;
  
  try {
    lSIU_S12 = new SIU_S12();

    MSH lmshSegment = lSIU_S12.getMSH();
    lmshSegment.getFieldSeparator().setValue("|");
    lmshSegment.getEncodingCharacters().setValue("^~\\&");
    lmshSegment.getSendingApplication().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~Destination:participatingSystemName]!>);
    lmshSegment.getSendingFacility().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:name]!>);
    lmshSegment.getReceivingApplication().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~OriginatingSystem:participatingSystemName]!>);
    lmshSegment.getReceivingFacility().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:name]!>);
//    lmshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue(currentDateTimeString);
    lmshSegment.getMessageControlID().setValue(getSequenceNumber());
//    lmshSegment.getVersionID().getVersionID().setValue("2.3");

  }
  catch(Exception e) {
%>
Here Exception <!%e!>
<%
  }

    return lSIU_S12;
    
}

 
public void execute1() {

  iSymbolTable.parseXml("C:\\Users\\ptm\\OneDrive\\Desktop\\EHRM\\ExamManagement-3.0rc5.iepd\\XMLsamples\\3.0\\basic_exam_schedule_request_with_mult_contentions\\1_ExamSchedulingRequestCreatedEvent.xml");

%>
participatingSystemName   ** <![em~ExamManagementEventNotification:em~OriginatingSystem:participatingSystemName]!> **
contractorName            ** <![em~ExamManagementEventNotification:em~OriginatingSystem:contractorName]!> **
participatingSystemName   ** <![em~ExamManagementEventNotification:em~Destination:participatingSystemName]!> **
eventUuid                 ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:eventUuid]!> **
eventDtg                  ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:eventDtg]!> **
examName                  ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:examName]!> **
modelVersion              ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:modelVersion]!> **
examAppointmentUuid       ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:examAppointmentUuid]!> **
scheduledDateTime         ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:scheduledDateTime]!> **
previousEventUuid         ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:previousEventUuid]!> **
examSchedulingRequestUuid ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:examSchedulingRequestUuid]!> **
id                        ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:id]!> **
name                      ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:name]!> **
Address1                  ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:em~Address:em~Address1]!> **
City                      ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:em~Address:em~City]!> **
State                     ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:em~Address:em~State]!> **
ZipOrPostalCode           ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:em~Address:em~ZipOrPostalCode]!> **
Country                   ** <![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:em~Address:em~Country]!> **
<%

  try {
    SIU_S12 lSIU_S12 = new SIU_S12();

    MSH lmshSegment = lSIU_S12.getMSH();
    lmshSegment.getFieldSeparator().setValue("|");
    lmshSegment.getEncodingCharacters().setValue("^~\\&");
    lmshSegment.getSendingApplication().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~Destination:participatingSystemName]!>);
    lmshSegment.getSendingFacility().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:name]!>);
    lmshSegment.getReceivingApplication().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~OriginatingSystem:participatingSystemName]!>);
    lmshSegment.getReceivingFacility().getNamespaceID().setValue(<![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:em~ExaminingFacility:name]!>);
//    lmshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue(currentDateTimeString);
    lmshSegment.getMessageControlID().setValue(getSequenceNumber());
//    lmshSegment.getVersionID().getVersionID().setValue("2.3");

    SCH lschSegment = lSIU_S12.getSCH();
    lschSegment.getFillerAppointmentID().getUniversalID().setValue(<![em~ExamManagementEventNotification:em~AppointmentScheduledEvent:eventUuid]!>);

    // Now, let's encode the message and look at the output
    Parser lParser = iHapiContext.getPipeParser();
    String lEncodedMessage = lParser.encode(lSIU_S12);
    System.out.println("Printing ER7 Encoded Message:");
    System.out.println(lEncodedMessage);

    // Next, let's use the XML parser to encode as XML
    lParser = iHapiContext.getXMLParser();
    lEncodedMessage = lParser.encode(lSIU_S12);
    System.out.println("Printing XML Encoded Message:");
    System.out.println(lEncodedMessage);

  }
  catch(Exception e) {
%>
Here Exception <!%e!>
<%

  }
  
}

public void executex() {

  iHapiContext.setValidationRuleBuilder(new NoValidationBuilder());
  Message lMessage = null;
  SIU_S12 lSIU_S12 = null;
  
  try {
    //  Block of code to try
    lSIU_S12 = (SIU_S12) createMessage("SIU_S12");

    // Populate the MSH Segment
//    MSH lMshSegment = lSIU_S12.getMSH();
//    lMshSegment.getSendingApplication().getNamespaceID().setValue("TestSendingSystem");
//    lMshSegment.getSequenceNumber().setValue("123");

    MSH mshSegment = lSIU_S12.getMSH();
    mshSegment.getFieldSeparator().setValue("|");
    mshSegment.getEncodingCharacters().setValue("^~\\\\&");
    mshSegment.getSendingApplication().getNamespaceID().setValue("Our System");
    mshSegment.getSendingFacility().getNamespaceID().setValue("Our Facility");
    mshSegment.getReceivingApplication().getNamespaceID().setValue("Their Remote System");
    mshSegment.getReceivingFacility().getNamespaceID().setValue("Their Remote Facility");
//    mshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue(currentDateTimeString);
    mshSegment.getMessageControlID().setValue(getSequenceNumber());
//    mshSegment.getVersionID().getVersionID().setValue("2.4");
   

%>
Here1
<%

    // Now, let's encode the message and look at the output
    Parser lParser = iHapiContext.getPipeParser();
    String lEncodedMessage = lParser.encode(lSIU_S12);
    System.out.println("Printing ER7 Encoded Message:");
    System.out.println(lEncodedMessage);

    // Next, let's use the XML parser to encode as XML
    lParser = iHapiContext.getXMLParser();
    lEncodedMessage = lParser.encode(lSIU_S12);
    System.out.println("Printing XML Encoded Message:");
    System.out.println(lEncodedMessage);

%>
Here1a
<%

  }
  catch(Exception e) {
    //  Block of code to handle errors
%>
Here Exception <!%e!>
<%

  }
 

  
%>
Here2
<%

}

public Message createMessage(String aMessageType) throws HL7Exception {

  if (aMessageType.equals("SIU_S12")) {
    return mySIUMessageBuilder();
  }

// Consider throwing not handled exception

  return null;
  
}

public Message mySIUMessageBuilder() throws HL7Exception {

  return new SIU_S12();

}

public void createMshSegment(String currentDateTimeString) throws DataTypeException {
//  MSH mshSegment = _adtMessage.getMSH();
//  mshSegment.getFieldSeparator().setValue("|");
//  mshSegment.getEncodingCharacters().setValue("^~\\\\&");
//  mshSegment.getSendingApplication().getNamespaceID().setValue("Our System");
//  mshSegment.getSendingFacility().getNamespaceID().setValue("Our Facility");
//  mshSegment.getReceivingApplication().getNamespaceID().setValue("Their Remote System");
//  mshSegment.getReceivingFacility().getNamespaceID().setValue("Their Remote Facility");
//  mshSegment.getDateTimeOfMessage().getTimeOfAnEvent().setValue(currentDateTimeString);
//  mshSegment.getMessageControlID().setValue(getSequenceNumber());
//  mshSegment.getVersionID().getVersionID().setValue("2.4");
}

private String getCurrentTimeStamp() {
  return new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
}

private String getSequenceNumber() {
  String facilityNumberPrefix = "1234"; // some arbitrary prefix for the facility
  return facilityNumberPrefix.concat(getCurrentTimeStamp());
}

