context micScriptComponent
import javax.crypto.*
import javax.crypto.spec.*
import java.net.InetAddress
var private Script script;
var private SymbolTable iSymbolTable;
var private OutputManager outputManager;
var private PropertyHelper propertyHelper;
var private Log log;
var private int logClass = 0;
end
private Script script;
private SymbolTable iSymbolTable;
private OutputManager outputManager;
private PropertyHelper propertyHelper;
private Log log;
private int logClass = 0;

  public void execute(String scriptArguments[]) {

    iSymbolTable.parseXml( iSymbolTable.getWorkFilePath("jacLicense.") + "VBALicense.xml");

    PBEKeySpec lPBEKeySpec;
    PBEParameterSpec lPBEParamSpec;
    SecretKeyFactory lSecretKeyFactory;

    // Salt must be eight bytes long.
    String lSaltString = "ac500000";
    byte[] lSalt = lSaltString.getBytes();

    int lCount = 5;

    iSymbolTable.getPropertyCollection().replacePropertyValue("jacLicense:product", new PropertyValue("jac"));
    iSymbolTable.getPropertyCollection().replacePropertyValue("jacLicense:from", new PropertyValue(""));
    iSymbolTable.getPropertyCollection().replacePropertyValue("jacLicense:to", new PropertyValue("2004.12.31"));
    iSymbolTable.getPropertyCollection().replacePropertyValue("jacLicense:name", new PropertyValue("Veterans Benefits Administration"));
    iSymbolTable.getPropertyCollection().replacePropertyValue("jacLicense:email", new PropertyValue("vba.va.gov"));
    iSymbolTable.getPropertyCollection().replacePropertyValue("jacLicense:options", new PropertyValue(""));
    try {
      InetAddress address = InetAddress.getLocalHost();
      iSymbolTable.getPropertyCollection().replacePropertyValue("jacLicense:host", new PropertyValue(address.getHostName().toLowerCase()));
      if (!iSymbolTable.getPropertyCollection().getPropertyValue("jacLicense:host", 0).getValueString().startsWith("317")) {
          System.out.println("Invalid host name.");
          return;
      }
    } catch (Exception lException) {   System.out.println("Invalid host name exception.");
                                       return; }

    String lCheck =
        iSymbolTable.getPropertyCollection().getPropertyValue("jacLicense:from", 0).getValueString() +
        iSymbolTable.getPropertyCollection().getPropertyValue("jacLicense:to", 0).getValueString() +
        iSymbolTable.getPropertyCollection().getPropertyValue("jacLicense:options", 0).getValueString() +
        iSymbolTable.getPropertyCollection().getPropertyValue("jacLicense:host", 0).getValueString() +
        iSymbolTable.getPropertyCollection().getPropertyValue("jacLicense:email", 0).getValueString() +
        iSymbolTable.getPropertyCollection().getPropertyValue("jacLicense:name", 0).getValueString();
    char[] lCheckChar = new char[lCheck.length()];
    lCheck.getChars(0, lCheck.length(), lCheckChar, 0);

    try {
        lPBEParamSpec = new PBEParameterSpec(lSalt, lCount);
        lPBEKeySpec = new PBEKeySpec(lCheckChar);
        lSecretKeyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");
        SecretKey lSecretKey = lSecretKeyFactory.generateSecret(lPBEKeySpec);
        Cipher lCipher = Cipher.getInstance("PBEWithMD5AndDES");
        lCipher.init(Cipher.ENCRYPT_MODE, lSecretKey, lPBEParamSpec);
        byte[] lClearText = new String(lCheck).getBytes();
        byte[] lCipherText = lCipher.doFinal(lClearText);
        String lCipherString = new Long(lCipherText.length).toString();
        for (int l=0; l<lCipherText.length; l++) {
            lCipherString = lCipherString.concat(new Byte(lCipherText[l]).toString()) + new Long(l).toString();
        }
        <!jacLicense:key!>!reset(lCipherString);

        } catch (Exception lException) {
            System.err.println("***************** FAILED!");
            return;
        }

    <!$outputFile!>!reset(iSymbolTable.getWorkFilePath("jacLicense.") + "license.xml");
    script.delete(<![$outputFile]!>);
//    outputManager.openOutputFile(<![$outputFile]!>, true);

%>
<license>
  <<![jacLicense:product]!>>
    <from><![jacLicense:from]!></from>
    <to><![jacLicense:to]!></to>
    <options><![jacLicense:options]!></options>
    <host><![jacLicense:host]!></host>
    <email><![jacLicense:email]!></email>
    <name><![jacLicense:name]!></name>
    <key><![jacLicense:key]!></key>
  </<![jacLicense:product]!>>
</license>
<%

  }
